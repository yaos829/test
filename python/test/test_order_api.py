# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [⇩ Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.order_api import OrderApi  # noqa: E501
from swagger_client.rest import ApiException
from excel.excel import ExcelClass
import json

class TestOrderApi(unittest.TestCase):
    """OrderApi unit test stubs"""

    def setUp(self):
        self.api = swagger_client.api.order_api.OrderApi()  # noqa: E501
        path = "C:\Users\JS-Dev-010\Desktop\isolatedMargen.xlsx"
        sheetname="order_api"
        self.params = ExcelClass(path).xl_parse(sheetname)

    def tearDown(self):
        pass

    def test_order_amend(self):
        """Test case for order_amend

        Amend the quantity or price of an open order.  # noqa: E501
        """
        pass

    def test_order_amend_bulk(self):
        """Test case for order_amend_bulk

        Amend multiple orders for the same symbol.  # noqa: E501
        """
        pass

    def test_order_cancel(self):
        """Test case for order_cancel

        Cancel order(s). Send multiple order IDs to cancel in bulk.  # noqa: E501
        """
        pass

    def test_order_cancel_all(self):
        """Test case for order_cancel_all

        Cancels all of your orders.  # noqa: E501
        """
        pass

    def test_order_cancel_all_after(self):
        """Test case for order_cancel_all_after

        Automatically cancel all your orders after a specified timeout.  # noqa: E501
        """
        pass

    def test_order_close_position(self):
        """Test case for order_close_position

        Close a position. [Deprecated, use POST /order with execInst: 'Close']  # noqa: E501
        """
        pass

    def test_order_get_orders(self):
        """Test case for order_get_orders

        Get your orders.  # noqa: E501
        """
        # kwargs = {"async": "false", "filter": {"symbol": "XBTUSD"}, "columns": "", "count": '10'}
        # results = self.api.order_get_orders(**kwargs)
        pass

    def test_order_new(self):
        """Test case for order_new

        Create a new order.  # noqa: E501
        """

        kwargs = {}
        for each in self.params:
            param = each['params']
            print("param: " + str(param))
            for item in param.keys():
                if (param[item]):
                    kwargs[item] = param[item]
            print('kwargs: ' + str(kwargs))
            # 后续数据类型处理
            try:
                result = self.api.order_new(**kwargs)
                print("result: " + str(result))

                expect_output = each['ExpectedOutput'].encode('utf-8')
                expect_output = json.loads(expect_output)
                print("ExpectedOutput: " + str(expect_output))
                for k in expect_output.keys():
                    print("key: " + k)
                    print("value: " + expect_output[k])
                    # assert(result.ord_status == expect_output[k])
                    assert(getattr(result, k) == expect_output[k])
            except ApiException as e:
                print("status_code:" + str(e.status))
                print("reason:" + e.reason)
                print("error:" + e.body)
        # 这里可以使用pandas去读取excel作为配置文件 added by chaiyu 2019-04-01
        # kwargs = {"symbol": "XBTUSD", "async": "false", "order_qty": 0}
        # try:
        #     result = self.api.order_new(**kwargs)
        #     print("\nresult: " + str(result))
        # except ApiException as e:
        #     print("status_code:" + str(e.status))
        #     print("reason:" + e.reason)
        #     print("error:" + e.body)

        # 下面写预期值 added by chaiyu 2019-04-01
        # assert(result.ord_status == "Filled")
        pass

    def test_order_new_bulk(self):
        """Test case for order_new_bulk

        Create multiple new orders for the same symbol.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
